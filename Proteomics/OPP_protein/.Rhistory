TheTable$dir <- ifelse(TheTable$NES >= 0, 1, -1)
TheTable$ADP <- TheTable$NES
TheTable
# pGCT
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
library(ggplot2)
library(DESeq2)
library(stringr)
library("pheatmap")
library("RColorBrewer")
library(fgsea)
library(ComplexHeatmap)
library(circlize)
library(rstatix)
library(ggpubr)
library(ggrepel)
library(preprocessCore)
library(clusterProfiler)
library(enrichplot)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 150)[1:n]
}
scale_rows = function(x){
m = apply(x, 1, mean, na.rm = T)
s = apply(x, 1, sd, na.rm = T)
return((x - m) / s)
}
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
#get CNV cases
#raw data preprocessing
Sample_features <- read.delim("Data/Info_Nascent.txt",sep = "\t",header = T)
samples <- data.frame(Sample_features)
rownames(samples) <- Sample_features$case
samples <- samples[which(samples$Cell!="CL1"),]
################
counts1 <- read.csv("Data/Final_Nascent_protein_matrix.txt", sep="", head=T, row.names = "Gene",quote = "\"")
counts1 <- counts1[,which((colnames(counts1 ) %in% samples$case ))]
nrow(counts)
counts <- round(counts1/10000)
xxx <- counts[,c(4:6,10:12,16:18)]
keep <- rowSums(xxx == min(counts)) <= 4
counts <- counts[keep,]
nrow(counts)
dds=DESeqDataSetFromMatrix(countData = counts,colData = samples,design = ~ Group)
vsd <- vst(dds ,blind = TRUE)
#vsd <- rlog(dds, blind = TRUE)
head(assay(vsd), 3)
expMatrix <- assay(vsd)
#expMatrix_1 <- normalize.quantiles(expMatrix, copy = TRUE)
expMatrix_1 <- expMatrix
colnames(expMatrix_1) <- colnames(expMatrix)
rownames(expMatrix_1) <- rownames(expMatrix)
expMatrix_new <- rbind(expMatrix_1)
all(rownames(samples) %in% colnames(expMatrix_new ))
all(colnames(expMatrix_new ) %in% rownames(samples))
expMatrix_new <- log2(counts)
#PCA
library(genefilter)
library(ggrepel)
expMatrix <- expMatrix_new
rv <- rowVars(expMatrix)
ntop <- 500
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,  length(rv)))]
pca <- prcomp(t(expMatrix[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
intgroup <- c("case",  "Cell",  "Group","Protein","Line")
if (!all(intgroup %in% colnames(samples))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(samples[, intgroup, drop = FALSE])
group <- if (length(intgroup) > 1){ factor(apply(intgroup.df, 1, paste, collapse = " : ")) }else{ samples[[intgroup]]}
d <- data.frame(pca$x,intgroup.df)
myPCA <- ggplot()+theme_classic()
myPCA <- myPCA + geom_point(data = d, aes(x =PC1, y = PC2,  fill = Line,shape = Protein),alpha=0.9,size = 3.6) +
# geom_text(data=d,aes(x=PC1,y=PC2,label = as.factor(rownames(d))),color="black",size=2.5 )+
xlab(paste0("PC1: ", round(percentVar[1] * 100), "% variance")) + scale_shape_manual(values=c(21,22))+
scale_fill_manual(values = c(OE="#7fbc41",Repair="#de77ae",WT="grey80"),guide = guide_legend(override.aes=list(shape=21)))+
ylab(paste0("PC2: ", round(percentVar[2] * 100), "% variance")) + coord_fixed()
myPCA <- myPCA + theme(panel.background=element_rect(fill='transparent',color='transparent'),plot.margin=unit(c(2,1,0.5,1),'lines'),plot.title=element_text(size=24,vjust=0.5,hjust=0.5,face='bold.italic'),
text=element_text(size=12,face='plain',color='black'),legend.key.width=unit(1,'cm'),legend.key.height=unit(1,'cm'),legend.position='right',
legend.margin=margin(t=0.1,r=0.1,b=0,l=0.1,unit='cm'),legend.text=element_text(size=12,face='plain',color='black'),axis.text.y=element_text(size=12,face='plain',color='black'),
axis.text.x=element_text(size=12,face='plain',color='black'),axis.title.x=element_text(size=14,face='plain',color='black'),axis.title.y=element_text(size=14,face='plain',color='black'))
myPCA <- myPCA + scale_y_continuous(expand=c(0,0),limits=c(-14,14),breaks = seq(-20,20,5)) +
scale_x_continuous(expand=c(0,0),limits=c(-14,14),breaks = seq(-20,20,5))
figure_1<-rbind(ggplotGrob(myPCA ),size="first")
ggsave(file="./Fig_test/PCA.pdf", plot=figure_1,bg = 'white', width = 14, height = 10, units = 'cm', dpi = 600)
########
#testing
data <- expMatrix_new
AnovaP_genetic   <- rep(NA,nrow(data))
AnovaP_OPP       <- rep(NA,nrow(data))
Rank_genetic     <- rep(NA,nrow(data))
Rank_OPP         <- rep(NA,nrow(data))
nVar1 <- 0
nVar2 <- 0
for(i in 1:nrow(data)){
test <- data.frame(as.numeric(data[i,]), samples$Protein,samples$genetic)
colnames(test) <- c("value","protein","genetic")
rownames(test) <- colnames(data)
G1 <- test[which(test$genetic=="WT"),1]
G2 <- test[which(test$genetic=="Alt"),1]
G3 <- test[which(test$protein=="background"),1]
G4 <- test[which(test$protein=="nascent"),1]
res.aov2 <- aov(value ~  genetic + protein, data = test)
myresults <- summary(res.aov2)
AnovaP_genetic[i] <- myresults[[1]][[5]][1]
AnovaP_OPP[i] <- myresults[[1]][[5]][2]
if(mean(G2) > mean(G1)){
Rank_genetic[i] <- -1   #Alt highly expressed ranking high
}else{
Rank_genetic[i] <- 1
}
if(mean(G4) > mean(G3)){
Rank_OPP[i] <- -1   #nascent highly expressed ranking high
}else{
Rank_OPP[i] <- 1
}
}
xxx <- data
rowMean <- rowMeans(xxx)
rowSD <- rowSds(xxx)
geneName <-rownames(xxx)
FDR_genetic <- p.adjust(AnovaP_genetic,method = "fdr")
FDR_OPP     <- p.adjust(AnovaP_OPP,method = "fdr")
Rank_genetic_GSEA <- Rank_genetic * log10(AnovaP_genetic)
Rank_genetic <- Rank_genetic * log10(FDR_genetic)
Rank_OPP <- Rank_OPP * log10(FDR_OPP)
final_data <- data.frame(geneName,rowMean,rowSD,AnovaP_genetic,FDR_genetic,Rank_genetic,AnovaP_OPP,FDR_OPP,Rank_OPP,Rank_genetic_GSEA)
write.csv(final_data , file = "./Fig_test/ANOVA_all_genesEXP.csv",sep = "\t",quote = F,row.names = F)
TSG <- read.table("./lib/TS_list.txt",header=F)
ONCO <- read.table("./lib/OC_list.txt",header=F)
#################
######################
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 0.4, minGSSize = 5,maxGSSize = 1500,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy$adj <- ifelse(fgseaResTidy$pvalue <= 0.05, "sig", "c_ns")
fgseaResTidy$adj[fgseaResTidy$NES>0 & fgseaResTidy$pvalue <= 0.05] <- "a_up"
fgseaResTidy$adj[fgseaResTidy$NES<0 & fgseaResTidy$pvalue <= 0.05] <- "b_down"
fgseaResTidy$ID <- gsub("_"," ",tolower(fgseaResTidy$ID))
fgseaResTidy$ID <- gsub("hp ","",tolower(fgseaResTidy$ID))
TheTable <- fgseaResTidy[which(fgseaResTidy$pvalue <= 0.05 & fgseaResTidy$p.adjust <= 0.9),]
TheTable
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 1, minGSSize = 5,maxGSSize = 1500,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy$adj <- ifelse(fgseaResTidy$pvalue <= 0.05, "sig", "c_ns")
fgseaResTidy$adj[fgseaResTidy$NES>0 & fgseaResTidy$pvalue <= 0.05] <- "a_up"
fgseaResTidy$adj[fgseaResTidy$NES<0 & fgseaResTidy$pvalue <= 0.05] <- "b_down"
fgseaResTidy$ID <- gsub("_"," ",tolower(fgseaResTidy$ID))
fgseaResTidy$ID <- gsub("hp ","",tolower(fgseaResTidy$ID))
TheTable <- fgseaResTidy[which(fgseaResTidy$pvalue <= 0.05 & fgseaResTidy$p.adjust <= 0.9),]
fgseaResTidy
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 1, minGSSize = 4,maxGSSize = 100,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy$adj <- ifelse(fgseaResTidy$pvalue <= 0.05, "sig", "c_ns")
fgseaResTidy$adj[fgseaResTidy$NES>0 & fgseaResTidy$pvalue <= 0.05] <- "a_up"
fgseaResTidy$adj[fgseaResTidy$NES<0 & fgseaResTidy$pvalue <= 0.05] <- "b_down"
fgseaResTidy$ID <- gsub("_"," ",tolower(fgseaResTidy$ID))
fgseaResTidy$ID <- gsub("hp ","",tolower(fgseaResTidy$ID))
TheTable <- fgseaResTidy[which(fgseaResTidy$pvalue <= 0.05 & fgseaResTidy$p.adjust <= 0.9),]
TheTable
fgseaResTidy
gse_order
######################
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 1, minGSSize = 3,maxGSSize = 100,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 1, minGSSize = 2,maxGSSize = 100,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
#humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
humanP <- read.gmt("../Nascent_protein/lib/All_lymphoma.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 1, minGSSize = 2,maxGSSize = 100,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy$adj <- ifelse(fgseaResTidy$pvalue <= 0.05, "sig", "c_ns")
fgseaResTidy$adj[fgseaResTidy$NES>0 & fgseaResTidy$pvalue <= 0.05] <- "a_up"
fgseaResTidy$adj[fgseaResTidy$NES<0 & fgseaResTidy$pvalue <= 0.05] <- "b_down"
fgseaResTidy$ID <- gsub("_"," ",tolower(fgseaResTidy$ID))
fgseaResTidy$ID <- gsub("hp ","",tolower(fgseaResTidy$ID))
TheTable <- fgseaResTidy[which(fgseaResTidy$pvalue <= 0.05 & fgseaResTidy$p.adjust <= 0.9),]
TheTable
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy$adj <- ifelse(fgseaResTidy$pvalue <= 0.05, "sig", "c_ns")
fgseaResTidy$adj[fgseaResTidy$NES>0 & fgseaResTidy$pvalue <= 0.05] <- "a_up"
fgseaResTidy$adj[fgseaResTidy$NES<0 & fgseaResTidy$pvalue <= 0.05] <- "b_down"
fgseaResTidy$ID <- gsub("_"," ",tolower(fgseaResTidy$ID))
fgseaResTidy$ID <- gsub("hp ","",tolower(fgseaResTidy$ID))
TheTable <- fgseaResTidy[which(fgseaResTidy$pvalue <= 0.05 & fgseaResTidy$p.adjust <= 0.1),]
View(TheTable)
###########################################333
gse$ID
#1 2
#2 3
#3 528
for(x in c(1:6)){
part1 <- gseaplot2(gse, geneSetID = c(x) ,subplots=c(1),pvalue_table = F,color = "purple",title = sub("gobp","GO:BP",gsub("_"," ",tolower(gse$ID[x]))))
part1 <- part1 + theme_classic()
part1 <- part1 + scale_y_continuous(breaks=seq(-1,1,0.2))
part1 <- part1 + ylab("Enrichment score")
part1 <- part1 + geom_hline(yintercept = 0,linetype=2,color="grey")
part1 <- part1   + theme(panel.background=element_rect(fill='white',color='black',size=1),plot.margin=unit(c(1,1,-0.11,1),'lines'),plot.title=element_text(size=14,vjust=0.5,hjust=0.5,face='plain'),
text=element_text(size=12,face='plain'),legend.key.width=unit(1,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='none',axis.line = element_blank(),axis.ticks.x = element_blank(),
legend.margin=margin(t=0.1,r=0.1,b=0,l=0.1,unit='cm'),legend.text=element_text(size=12,face='plain'),axis.text.y=element_text(size=12,face='plain',color='black'),
axis.text.x=element_blank(),axis.title.x=element_blank(),axis.title.y=element_text(size=12,hjust=0.5,vjust=2,face='plain',color='black'))
part1
part2 <- gseaplot2(gse, geneSetID = c(x) ,subplots=c(2))
part2 <- part2 + theme_classic()
part2 <- part2 + xlab("Protein ranking by genetic factor")
part2 <- part2 +  coord_cartesian(ylim = c(0, 0.6))
part2 <- part2   + theme(panel.background=element_rect(fill='transparent',color='black',size=1),plot.margin=unit(c(-0.14,1,1,3),'lines'),plot.title=element_text(size=16,vjust=0.5,hjust=0.5,face='bold'),
text=element_text(size=12,face='plain'),legend.key.width=unit(1,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='none',axis.line = element_blank(),axis.ticks.x = element_blank(),
legend.margin=margin(t=0.1,r=0.1,b=0,l=0.1,unit='cm'),legend.text=element_text(size=12,face='plain'),axis.text.y=element_blank(),axis.ticks.y = element_blank(),
axis.text.x=element_text(size=10,face='plain',color='black'),axis.title.x=element_text(size=12,face='plain',color='black'),axis.title.y=element_blank())
part2
figure <- rbind(ggplotGrob(part1),ggplotGrob(part2),size="first")
panels <- figure$layout$t[grep("panel", figure$layout$name)]
figure$heights[panels][1] <- unit(3,'null')
figure$heights[panels][2] <- unit(0.5,'null')
ggsave(file=paste0("./Fig_test/HP/xxxx_inte_",x,".pdf"), plot=figure,bg = 'white', width = 9, height = 7, units = 'cm', dpi = 600)
}
gse_order
######################
ranks <-  final_data$Rank_genetic_GSEA
names(ranks) <- final_data$geneName
geneList <- na.omit(ranks)
geneList = sort(geneList, decreasing = T)
str(ranks)
#humanP <- read.gmt("../Nascent_protein/lib/c5.hpo.v2022.1.Hs.symbols.gmt")
humanP <- read.gmt("../Nascent_protein/lib/HP_B_CELL_LYMPHOMA.gmt")
#humanP <- read.gmt("../Nascent_protein/lib/All_lymphoma.gmt")
gse <- GSEA(geneList=geneList, TERM2GENE= humanP , pvalueCutoff = 1, minGSSize = 2,maxGSSize = 100,
eps = 1e-50, pAdjustMethod = "BH", verbose = FALSE, seed = T, by = "fgsea")
gse_order<-gse[order(gse$enrichmentScore,decreasing=T)]
head(gse_order)
write.table(gse_order,file="report_inte2.txt",sep="\t",quote=F,row.names = F)
fgseaResTidy <- gse_order[,c(1:8)]
fgseaResTidy$adj <- ifelse(fgseaResTidy$pvalue <= 0.05, "sig", "c_ns")
fgseaResTidy$adj[fgseaResTidy$NES>0 & fgseaResTidy$pvalue <= 0.05] <- "a_up"
fgseaResTidy$adj[fgseaResTidy$NES<0 & fgseaResTidy$pvalue <= 0.05] <- "b_down"
fgseaResTidy$ID <- gsub("_"," ",tolower(fgseaResTidy$ID))
fgseaResTidy$ID <- gsub("hp ","",tolower(fgseaResTidy$ID))
TheTable <- fgseaResTidy[which(fgseaResTidy$pvalue <= 0.05 & fgseaResTidy$p.adjust <= 0.1),]
##########################################333
gse$ID
#1 2
#2 3
#3 528
for(x in c(1:6)){
part1 <- gseaplot2(gse, geneSetID = c(x) ,subplots=c(1),pvalue_table = F,color = "purple",title = sub("gobp","GO:BP",gsub("_"," ",tolower(gse$ID[x]))))
part1 <- part1 + theme_classic()
part1 <- part1 + scale_y_continuous(breaks=seq(-1,1,0.2))
part1 <- part1 + ylab("Enrichment score")
part1 <- part1 + geom_hline(yintercept = 0,linetype=2,color="grey")
part1 <- part1   + theme(panel.background=element_rect(fill='white',color='black',size=1),plot.margin=unit(c(1,1,-0.11,1),'lines'),plot.title=element_text(size=14,vjust=0.5,hjust=0.5,face='plain'),
text=element_text(size=12,face='plain'),legend.key.width=unit(1,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='none',axis.line = element_blank(),axis.ticks.x = element_blank(),
legend.margin=margin(t=0.1,r=0.1,b=0,l=0.1,unit='cm'),legend.text=element_text(size=12,face='plain'),axis.text.y=element_text(size=12,face='plain',color='black'),
axis.text.x=element_blank(),axis.title.x=element_blank(),axis.title.y=element_text(size=12,hjust=0.5,vjust=2,face='plain',color='black'))
part1
part2 <- gseaplot2(gse, geneSetID = c(x) ,subplots=c(2))
part2 <- part2 + theme_classic()
part2 <- part2 + xlab("Protein ranking by genetic factor")
part2 <- part2 +  coord_cartesian(ylim = c(0, 0.6))
part2 <- part2   + theme(panel.background=element_rect(fill='transparent',color='black',size=1),plot.margin=unit(c(-0.14,1,1,3),'lines'),plot.title=element_text(size=16,vjust=0.5,hjust=0.5,face='bold'),
text=element_text(size=12,face='plain'),legend.key.width=unit(1,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='none',axis.line = element_blank(),axis.ticks.x = element_blank(),
legend.margin=margin(t=0.1,r=0.1,b=0,l=0.1,unit='cm'),legend.text=element_text(size=12,face='plain'),axis.text.y=element_blank(),axis.ticks.y = element_blank(),
axis.text.x=element_text(size=10,face='plain',color='black'),axis.title.x=element_text(size=12,face='plain',color='black'),axis.title.y=element_blank())
part2
figure <- rbind(ggplotGrob(part1),ggplotGrob(part2),size="first")
panels <- figure$layout$t[grep("panel", figure$layout$name)]
figure$heights[panels][1] <- unit(3,'null')
figure$heights[panels][2] <- unit(0.5,'null')
ggsave(file=paste0("./Fig_test/HP/xxxx_inte_",x,".pdf"), plot=figure,bg = 'white', width = 9, height = 7, units = 'cm', dpi = 600)
}
########################
gse_order
term2 <- humanP$gene[humanP$term=="HP_NON_HODGKIN_LYMPHOMA_TSG"]
term2
term1 <- humanP$gene[humanP$term=="HP_B_CELL_LYMPHOMA_TSG"]
term2 <- humanP$gene[humanP$term=="HP_NON_HODGKIN_LYMPHOMA_TSG"]
plotTable <- final_data
plotTable_up <- plotTable[which( plotTable$Rank_genetic > 0 & plotTable$FDR_genetic <  0.01 ) ,]
plotTable_down <- plotTable[which( plotTable$Rank_genetic < 0 & plotTable$FDR_genetic <  0.01 ) ,]
plotTable_alter <- plotTable[which(  plotTable$FDR_genetic <  0.01 ) ,]
plotTable_other <- plotTable[which(!(plotTable$geneName %in% plotTable_alter$geneName)) ,]
plotTable_1 <- plotTable[(plotTable$geneName %in% term1 & plotTable$geneName %in% term2),]
plotTable_2 <- plotTable[(plotTable$geneName %in% term1 & !(plotTable$geneName %in% term2)),]
plotTable_3 <- plotTable[(!(plotTable$geneName %in% term1) & plotTable$geneName %in% term2),]
plotTable_sig <- rbind(plotTable_1,plotTable_2,plotTable_3)
mySub2 <- ggplot()+ theme_classic()
mySub2 <- mySub2 + geom_hline(yintercept = 0,linetype=1,size=0.4,color="grey20")
mySub2 <- mySub2 + geom_point(data = plotTable_other,   aes(x =   (Rank_genetic), y = Rank_OPP),fill="grey",alpha=0.2,size=1.5, shape = 22,stroke=0.2)
mySub2 <- mySub2  +
geom_vline(xintercept = min(plotTable_up$Rank_genetic),linetype=2,size=0.4,color="grey50") +
geom_vline(xintercept = max(plotTable_down$Rank_genetic),linetype=2,size=0.4,color="grey50")
mySub2 <- mySub2 + geom_point(data = plotTable_alter,      aes(x =   (Rank_genetic), y = Rank_OPP),fill="grey",alpha=0.2,size=1.5, shape = 21,stroke=0.2)
mySub2 <- mySub2 + geom_point(data = plotTable_1,    aes(x =   (Rank_genetic), y = Rank_OPP),fill="#fc8d62",alpha=0.9,size=1.5, shape = 21,stroke=0.2)
mySub2 <- mySub2 + geom_point(data = plotTable_2,    aes(x =   (Rank_genetic), y = Rank_OPP),fill="#8da0cb",alpha=0.9,size=1.5, shape = 21,stroke=0.2)
mySub2 <- mySub2 + geom_point(data = plotTable_3,    aes(x =   (Rank_genetic), y = Rank_OPP),fill="#66c2a5",alpha=0.9,size=1.5, shape = 21,stroke=0.2)
mySub2 <- mySub2 +geom_text_repel(data =plotTable_sig, aes(x = Rank_genetic, y = Rank_OPP,label = geneName),stat = "identity",position = "identity", max.overlaps = getOption("ggrepel.max.overlaps", default = 30),force=1.5,segment.size =0.2, size =2,color ='black')
mySub2 <- mySub2 + xlab("Log10(FDR of genetic factor)") + ylab("Log10(FDR of OPP label factor)") +
scale_y_continuous(expand=c(0,0),limits=c(-17,17),breaks=seq(-20,20,5)) +
scale_x_continuous(expand=c(0,0),limits=c(-8.1,8.1),breaks=seq(-8,8,4))
mySub2 <- mySub2 + theme(panel.background=element_rect(fill='transparent',color='transparent'),plot.margin=unit(c(2,1,0.5,1),'lines'),plot.title=element_text(size=14,vjust=0.5,hjust=0.5,face='bold.italic'),
legend.key.width=unit(1.5,'cm'),legend.key.height=unit(0.5,'cm'),legend.position='top',
legend.margin=margin(t=0.1,r=0.1,b=0,l=0.1,unit='cm'),legend.text=element_text(size=12),axis.text.y=element_text(size=10,face='plain',color='black'),
axis.text.x=element_text(size=10,face='plain',color='black'),axis.title.x=element_text(size=10,face='plain',color='black'),axis.title.y=element_text(size=10,hjust=0.5,vjust=2,face='plain',color='black'))
figure_4<-rbind(ggplotGrob(mySub2),size="last")
ggsave(file="./Fig_test/term.pdf", plot=figure_4,bg = 'white', width = 14, height = 7, units = 'cm', dpi = 600)
##################3333
plotTable <- final_data
plotTable$type <- "other"
plotTable$type[which(plotTable$geneName %in% term2)] <- "TSG2"
NAN_plot <- ggplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic)) + theme_classic()
NAN_plot <- NAN_plot +
geom_boxplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic),width = 0.4,size=0.5,fill="transparent")+
geom_quasirandom(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic,color=type,fill=type),width = 0.25,size=2,alpha=0.7,stroke=0.8, varwidth = T)
##################3333
library(ggbeeswarm)
plotTable <- final_data
plotTable$type <- "other"
plotTable$type[which(plotTable$geneName %in% term2)] <- "TSG2"
NAN_plot <- ggplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic)) + theme_classic()
NAN_plot <- NAN_plot +
geom_boxplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic),width = 0.4,size=0.5,fill="transparent")+
geom_quasirandom(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic,color=type,fill=type),width = 0.25,size=2,alpha=0.7,stroke=0.8, varwidth = T)
#stat_summary(fun.data=data_summary, color="grey20",geom = "errorbar" ,width = 0,linetype=2)+
#stat_summary(fun=mean, aes(ymax = ..y.., ymin = ..y..), color="grey20",geom = "errorbar" ,width = 0.4,size=1)
NAN_plot <-NAN_plot + theme(panel.background=element_rect(fill='transparent',color='transparent'),plot.margin=unit(c(2,2,2,2),'lines'),
plot.title=element_text(size=34,vjust=0.5,hjust=0.5,face='bold.italic',color='transparent'),text=element_text(size=14,face='bold'),
legend.key.width=unit(0.6,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='right',legend.text=element_text(size=14,hjust=0,face='bold'),
axis.text.x=element_text(size=12,face='bold',color='black'),axis.text.y=element_text(size=12,face='bold',color='black'),
axis.title.x=element_text(size=14,face='plain',color='black'),axis.title.y=element_text(size=14,face='plain',color='black'))
NAN_plot <- NAN_plot + scale_y_continuous(expand=c(0,0),limits=c(-3,2.4),breaks = seq(-10,20,1))
NAN_plot<- NAN_plot +ylab("Expression ranking") +xlab(NULL)
NAN_plot <- NAN_plot + scale_fill_manual(name=NULL,values = c(other="grey",TGS2="#4393c3"))
NAN_plot <- NAN_plot + scale_color_manual(name=NULL,values =  c(other="grey",TGS2="#4393c3"))
the<-compare_means(method = "wilcox.test",Rank_genetic ~ type,  data = plotTable,paired = F )
#NAN_plot<- NAN_plot +stat_compare_means(comparisons = my_comparisons)
#NAN_plot <- NAN_plot +stat_pvalue_manual(
#  the, label = NULL, size = 3,linetype = 1,
#  y.position = c( 2.1)
#)
figure_2<-rbind(ggplotGrob(NAN_plot),size="last")
ggsave(file="./box_term2.pdf", plot=figure_2,bg = 'white', width =10, height = 9, units = 'cm', dpi = 600)
the
##################3333
library(ggbeeswarm)
plotTable <- final_data
plotTable$type <- "other"
plotTable$type[which(plotTable$geneName %in% term2)] <- "TSG2"
NAN_plot <- ggplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic)) + theme_classic()
NAN_plot <- NAN_plot +
geom_boxplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic),width = 0.4,size=0.5,fill="transparent")+
geom_quasirandom(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic,color=type,fill=type),width = 0.25,size=2,alpha=0.7,stroke=0.8, varwidth = T)
#stat_summary(fun.data=data_summary, color="grey20",geom = "errorbar" ,width = 0,linetype=2)+
#stat_summary(fun=mean, aes(ymax = ..y.., ymin = ..y..), color="grey20",geom = "errorbar" ,width = 0.4,size=1)
NAN_plot <-NAN_plot + theme(panel.background=element_rect(fill='transparent',color='transparent'),plot.margin=unit(c(2,2,2,2),'lines'),
plot.title=element_text(size=34,vjust=0.5,hjust=0.5,face='bold.italic',color='transparent'),text=element_text(size=14,face='bold'),
legend.key.width=unit(0.6,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='right',legend.text=element_text(size=14,hjust=0,face='bold'),
axis.text.x=element_text(size=12,face='bold',color='black'),axis.text.y=element_text(size=12,face='bold',color='black'),
axis.title.x=element_text(size=14,face='plain',color='black'),axis.title.y=element_text(size=14,face='plain',color='black'))
NAN_plot <- NAN_plot + scale_y_continuous(expand=c(0,0),limits=c(-8,8),breaks = seq(-8,8,2))
NAN_plot<- NAN_plot +ylab("Expression ranking") +xlab(NULL)
NAN_plot <- NAN_plot + scale_fill_manual(name=NULL,values = c(other="grey",TGS2="#4393c3"))
NAN_plot <- NAN_plot + scale_color_manual(name=NULL,values =  c(other="grey",TGS2="#4393c3"))
the<-compare_means(method = "wilcox.test",Rank_genetic ~ type,  data = plotTable,paired = F )
#NAN_plot<- NAN_plot +stat_compare_means(comparisons = my_comparisons)
#NAN_plot <- NAN_plot +stat_pvalue_manual(
#  the, label = NULL, size = 3,linetype = 1,
#  y.position = c( 2.1)
#)
figure_2<-rbind(ggplotGrob(NAN_plot),size="last")
ggsave(file="./box_term2.pdf", plot=figure_2,bg = 'white', width =10, height = 9, units = 'cm', dpi = 600)
the
##################3333
library(ggbeeswarm)
plotTable <- final_data
plotTable$type <- "other"
plotTable$type[which(plotTable$geneName %in% term2)] <- "TSG2"
NAN_plot <- ggplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic)) + theme_classic()
NAN_plot <- NAN_plot +
geom_boxplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic),width = 0.4,size=0.5,fill="transparent")+
geom_quasirandom(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic,color=type,fill=type),width = 0.25,size=2,alpha=0.5,stroke=0.8, varwidth = T)
#stat_summary(fun.data=data_summary, color="grey20",geom = "errorbar" ,width = 0,linetype=2)+
#stat_summary(fun=mean, aes(ymax = ..y.., ymin = ..y..), color="grey20",geom = "errorbar" ,width = 0.4,size=1)
NAN_plot <-NAN_plot + theme(panel.background=element_rect(fill='transparent',color='transparent'),plot.margin=unit(c(2,2,2,2),'lines'),
plot.title=element_text(size=34,vjust=0.5,hjust=0.5,face='bold.italic',color='transparent'),text=element_text(size=14,face='bold'),
legend.key.width=unit(0.6,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='right',legend.text=element_text(size=14,hjust=0,face='bold'),
axis.text.x=element_text(size=12,face='bold',color='black'),axis.text.y=element_text(size=12,face='bold',color='black'),
axis.title.x=element_text(size=14,face='plain',color='black'),axis.title.y=element_text(size=14,face='plain',color='black'))
NAN_plot <- NAN_plot + scale_y_continuous(expand=c(0,0),limits=c(-8,8),breaks = seq(-8,8,2))
NAN_plot<- NAN_plot +ylab("Expression ranking") +xlab(NULL)
NAN_plot <- NAN_plot + scale_fill_manual(name=NULL,values = c(other="grey",TSG2="#4393c3"))
NAN_plot <- NAN_plot + scale_color_manual(name=NULL,values =  c(other="grey",TSG2="#4393c3"))
the<-compare_means(method = "wilcox.test",Rank_genetic ~ type,  data = plotTable,paired = F )
#NAN_plot<- NAN_plot +stat_compare_means(comparisons = my_comparisons)
#NAN_plot <- NAN_plot +stat_pvalue_manual(
#  the, label = NULL, size = 3,linetype = 1,
#  y.position = c( 2.1)
#)
figure_2<-rbind(ggplotGrob(NAN_plot),size="last")
ggsave(file="./box_term2.pdf", plot=figure_2,bg = 'white', width =10, height = 9, units = 'cm', dpi = 600)
the
term1
##################3333
library(ggbeeswarm)
plotTable <- final_data
plotTable$type <- "other"
plotTable$type[which(plotTable$geneName %in% term1)] <- "TSG2"
NAN_plot <- ggplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic)) + theme_classic()
NAN_plot <- NAN_plot +
geom_boxplot(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic),width = 0.4,size=0.5,fill="transparent")+
geom_quasirandom(data=plotTable,aes(x=reorder(type,-as.integer(as.factor(type))),y=Rank_genetic,color=type,fill=type),width = 0.25,size=2,alpha=0.5,stroke=0.8, varwidth = T)
#stat_summary(fun.data=data_summary, color="grey20",geom = "errorbar" ,width = 0,linetype=2)+
#stat_summary(fun=mean, aes(ymax = ..y.., ymin = ..y..), color="grey20",geom = "errorbar" ,width = 0.4,size=1)
NAN_plot <-NAN_plot + theme(panel.background=element_rect(fill='transparent',color='transparent'),plot.margin=unit(c(2,2,2,2),'lines'),
plot.title=element_text(size=34,vjust=0.5,hjust=0.5,face='bold.italic',color='transparent'),text=element_text(size=14,face='bold'),
legend.key.width=unit(0.6,'cm'),legend.key.height=unit(0.6,'cm'),legend.position='right',legend.text=element_text(size=14,hjust=0,face='bold'),
axis.text.x=element_text(size=12,face='bold',color='black'),axis.text.y=element_text(size=12,face='bold',color='black'),
axis.title.x=element_text(size=14,face='plain',color='black'),axis.title.y=element_text(size=14,face='plain',color='black'))
NAN_plot <- NAN_plot + scale_y_continuous(expand=c(0,0),limits=c(-8,8),breaks = seq(-8,8,2))
NAN_plot<- NAN_plot +ylab("Expression ranking") +xlab(NULL)
NAN_plot <- NAN_plot + scale_fill_manual(name=NULL,values = c(other="grey",TSG2="#4393c3"))
NAN_plot <- NAN_plot + scale_color_manual(name=NULL,values =  c(other="grey",TSG2="#4393c3"))
the<-compare_means(method = "wilcox.test",Rank_genetic ~ type,  data = plotTable,paired = F )
#NAN_plot<- NAN_plot +stat_compare_means(comparisons = my_comparisons)
#NAN_plot <- NAN_plot +stat_pvalue_manual(
#  the, label = NULL, size = 3,linetype = 1,
#  y.position = c( 2.1)
#)
figure_2<-rbind(ggplotGrob(NAN_plot),size="last")
ggsave(file="./box_term1.pdf", plot=figure_2,bg = 'white', width =10, height = 9, units = 'cm', dpi = 600)
the
